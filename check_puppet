#!/usr/bin/python

import datetime
import os
import os.path
import pprint
import subprocess

import yaml  # http://pyyaml.org
try:
    from yaml import CLoader as YAMLLoader
except ImportError:
    from yaml import Loader as YAMLLoader
import dateutil.parser  # http://dateutil.readthedocs.org

# http://pynag.org
from pynag.Plugins import PluginHelper, ok, warning, critical, unknown
nagios = PluginHelper()

# Add standard Puppet locations to $PATH, just in case.
os.environ['PATH'] = ':'.join([os.getenv('PATH'), '/opt/puppetlabs/bin'])

ERROR_LOG_LEVELS = ['err', ':err', 'alert', ':alert', 'emerg', ':emerg', 'crit', ':crit']

def get_puppet_setting(name):
    try:
        proc = subprocess.Popen(['puppet', 'config', 'print', name], stdout=subprocess.PIPE)
        (value, ignored) = proc.communicate()
        return value.strip()
    except OSError, e:
        nagios.status(unknown)
        nagios.add_summary('Unable to run "puppet" program to check local configuration.')
        nagios.add_long_output(str(e))
        nagios.exit()

# These functions are needed to handle the Ruby object (and symbol) definitions
# in the YAML.  Basically, we treat objects as dicts and symbols as strings.
def construct_ruby_object(loader, suffix, node):
    return loader.construct_yaml_map(node)
YAMLLoader.add_multi_constructor('!ruby/object:', construct_ruby_object)
def construct_ruby_sym(loader, node):
    return loader.construct_yaml_str(node)
YAMLLoader.add_constructor('!ruby/sym', construct_ruby_sym)

report = yaml.load(open(get_puppet_setting('lastrunreport'), 'r'), Loader=YAMLLoader)

for log_entry in report['logs']:
    if isinstance(log_entry['time'], datetime.datetime):
        end_time = log_entry['time']
    else:
        end_time = dateutil.parser.parse(log_entry['time'])
        # Convert to UTC
        end_time = (end_time - end_time.utcoffset()).replace(tzinfo=None)
# timedelta.total_seconds() wasn't added until Python 2.7.
last_run_time = end_time - report['time']
last_run_seconds = float(last_run_time.microseconds + (last_run_time.seconds + last_run_time.days * 24 * 3600) * 10**6) / 10**6
nagios.add_metric(label='last_run_time', value=last_run_seconds)
#pprint.pprint(report, indent=2)

# At this point, default the status to OK.
nagios.status(ok)

# Add error logs to summary.
errors_found = False
for log_entry in report['logs']:
    if log_entry['level'] in ERROR_LOG_LEVELS:
        nagios.add_long_output('%s: %s' % (log_entry['source'], log_entry['message']))
        errors_found = True

### CRITICAL if last run failed.
if report['status'] in ['failed', ':failed']:
    nagios.status(critical)
    nagios.add_summary('Last Puppet run failed')
elif errors_found:
    ### WARNING if there were errors in last run (but the run didn't fail).
    nagios.status(warning)
    nagios.add_summary('Errors found in last run')

## WARNING if it's been too long since the last run.
runinterval = int(get_puppet_setting('runinterval'))
next_run_deadline = report['time'] + datetime.timedelta(seconds=runinterval * 2)
if next_run_deadline < datetime.datetime.utcnow():
    nagios.status(warning)
    nagios.add_summary('Time since last run: %s' % (datetime.datetime.utcnow() - end_time))
    if os.path.isfile(get_puppet_setting('agent_catalog_run_lockfile')):
        nagios.add_long_output('There appears to be a puppet run in progress')

if nagios.status() == ok:
    nagios.add_summary('Puppet is up to date and the last run reported no errors')
nagios.exit()
